********************H.264 decoder********************************
*		by Xiaoyuan Lu and Bipeng Zhang			*
*		email: xl37136@ucsc.edu bizhang@ucsc.edu 	*
*****************************************************************


*****************************************************************
Introduction:

1. We rewrote opensource H.264 decoder based on elastic system. The main work is to rewrite input and output modules with C++. Also we rewrote the corresponding head files with our own child classes. In order to link systemverilog with C++, we rewrote top level verilog test bench and after studied the example of elastic system, we wrote C++ test bench from scratch. It works well on the elastic system in MASC server.

2. For Fluid Pipeline, besides what described above, we rewrote top level systemverilog file of the central logic, designed and implemented the corresponding interfaces to "stage"(elastic buffer). 

******************************************************************
Results:

The H.264 decoder without elastic buffer works well on elastic system. We used standard QCIF video called Akiyo_cif for our testing, the bitstream for the video is 
https://docs.google.com/file/d/0Bz8hasj5gcb4SlRpdHczUHVrWFk/edit
and this is the result that we decoded
https://docs.google.com/file/d/0Bz8hasj5gcb4bldfSDhYN3VhblE/edit

There are still some bugs in our code approaching the decoder with elastic buffer.
******************************************************************
File description:

This is the like to out Git repo
https://github.com/revoiry/CMPS202_H.264_decoder

There are two branches in our git repository. The fluid-ppl is the version without elastic buffer, which works well. The elastic branch is the version with elastic buffer, which still needs debugging.

1. The fluid-ppl branch:

bitstream: it contains a txt file which is the so-called test file. It is a 300 frames test video with hexadecimal expression.

rtl: it contains all of systemverilog files used in H.264 decoder. We rewrote H264.v and defined H264_types.v.

tests: it contains all test benches. H264_tb.cpp is the C++ test bench. H264_ttb.cpp defines vpi handles. H264_tb.v is the top level verilog test bench, in which we call functions achieved in H264_tb.cpp and H264_ttb.cpp. H264_ttb.tab is a configuration file for CVS simulator.

H264.xml: it is the system configuration file. Its name should be the same as the current folder's name.


2. The elastic branch:

most of files are the same as the ones in fluid-ppl branch.

rtl: nova.v is the centrol logic of H.264 decoder with adding control signals and input and output flops. nova_inter.v was designed to be an interface between the centrol logic and "stage" module. In H264.v, we combined two stages and the instance of nova_inter.v.

tests: the main structure is the same as the description in fluid-ppl. The differences are new defined class and vpi interfaces as we changed the top level centrol logic achievement for using "stage". 


*******************************************************************
how to use:
1. Make sure the xml file has the same name as the folder containing it.
2. Change the maximum cycles you want to run in H264_tb.cpp. In our case, to decode one frame we need almost 57300 cycles.
3. Access to the folder and input the command - rake test:H264_tb.
4. If the system has errors with no achievement of functions tb_inc_stat1() and tb_inc_stat2(). Just access to H264_ttb.cpp and comment them out. These two functions will be generated by the system once you changed some .v files in rtl floder. For now, they have no influence on our project.
5. After the system finishes its work, you could see some outputs. We printed out some input and output data, control signals and verilog output variables for debugging.
6. After you run it, there will be some folder and file generated automatically. Like csrc, simv and ucli.key.
*******************************************************************

if you have questions about our project, please feel free to contact us. Thank you for your time.
 



